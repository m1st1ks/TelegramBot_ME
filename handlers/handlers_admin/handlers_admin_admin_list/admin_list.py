from mysql.connector import connect, Error
from aiogram import types, Dispatcher

from create import bot
from config import host, user, password, db_name


async def admin_list(cb: types.CallbackQuery):
    await cb.answer()
    markup = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton('–í–µ—Å—å —Å–ø–∏—Å–æ–∫', callback_data="admin-admin_list-full_list")
    button2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data="admin-admin_list-change_list")
    button3 = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="admin")
    markup.add(button1, button2, button3)
    await cb.message.edit_text('üë®‚Äçüíª –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', reply_markup=markup)


async def admin_list_full_list(cb: types.CallbackQuery):
    await cb.answer()
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            SELECT * FROM admins;
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
                text = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: \n\n'
                for line in cursor.fetchall():
                    text += f'<b>–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä:</b> {line[0]}\n' \
                            f'<b>Id:</b> {line[1]}\n' \
                            f'<b>Username:</b> {line[2]}\n' \
                            f'<b>Role:</b> {line[3]}\n\n'
                connection.commit()
        markup = types.InlineKeyboardMarkup(row_width=2)
        button1 = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="admin-admin_list")
        button2 = types.InlineKeyboardButton('üìã –ú–µ–Ω—é', callback_data="admin")
        markup.add(button1, button2)
        await cb.message.edit_text(text, parse_mode='html', reply_markup=markup)
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–µ–ª –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @artem_lyashenka')


async def change_list(cb: types.CallbackQuery):
    await cb.answer()
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            SELECT admin_id, role FROM admins;
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
                data = []
                for line in cursor.fetchall():
                    data.append(line)
                    if cb.from_user.id == line[0] and (line[1] == 'Admin' or line[1] == 'Creator'):
                        buttons = [types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞',
                                                              callback_data="admin-admin_list-change_list-add")], \
                                  [types.InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞',
                                                              callback_data="admin-admin_list-change_list-remove")], \
                                  [types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="admin-admin_list"),
                                   types.InlineKeyboardButton('üìã–ú–µ–Ω—é', callback_data="admin")]
                        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
                        await cb.message.edit_text('–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫:', reply_markup=markup)
                        break
                else:
                    markup = types.InlineKeyboardMarkup(row_width=2)
                    button1 = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data="admin-admin_list")
                    button2 = types.InlineKeyboardButton('üìã –ú–µ–Ω—é', callback_data="admin")
                    markup.add(button1, button2)
                    await cb.message.edit_text(f'–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è! üòï', reply_markup=markup)
                connection.commit()
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–µ–ª –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @artem_lyashenka')


def reg_admin_list(dp: Dispatcher):
    dp.register_callback_query_handler(admin_list, text='admin-admin_list')
    dp.register_callback_query_handler(admin_list_full_list, text='admin-admin_list-full_list')
    dp.register_callback_query_handler(change_list, text='admin-admin_list-change_list')
