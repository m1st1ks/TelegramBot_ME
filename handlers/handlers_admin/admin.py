from mysql.connector import connect, Error
from aiogram import types, Dispatcher

from create import bot
from config import host, user, password, db_name


async def authentication(msg: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton('üîé –ü—Ä–æ–≤–µ—Ä–∫–∞', callback_data="admin")
    markup.add(button1)
    await bot.send_message(msg.from_user.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ üëá', reply_markup=markup)


async def admin(cb: types.CallbackQuery):
    try:
        with connect(
                host=host,
                user=user,
                password=password,
                database=db_name
        ) as connection:
            table_query = f"""
            SELECT * FROM admins;
            """
            with connection.cursor() as cursor:
                cursor.execute(table_query)
                data = []
                for line in cursor.fetchall():
                    data.append(line)
                    if cb.from_user.id == line[1]:
                        markup = types.InlineKeyboardMarkup(row_width=1)
                        button1 = types.InlineKeyboardButton('üë®‚Äçüíª –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', callback_data="admin-admin_list")
                        button2 = types.InlineKeyboardButton('üóÇ –ö–æ–Ω—Ç–µ–Ω—Ç', callback_data="admin-content")
                        markup.add(button1, button2)
                        await cb.message.edit_text(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {line[2]}', reply_markup=markup)
                        break
                else:
                    await cb.message.edit_text(f'–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! üòï\n'
                                               f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëâ /start')
                connection.commit()
    except Error as e:
        print(e)
        await bot.send_message(cb.from_user.id, '–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–µ–ª –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É... üôä \n'
                                                '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')


def reg_admin(dp: Dispatcher):
    dp.register_message_handler(authentication, commands='admin')
    dp.register_callback_query_handler(admin, text='admin')
